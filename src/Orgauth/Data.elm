-- generated by elm_rs


module Orgauth.Data exposing (..)

import Dict exposing (Dict)
import Json.Decode
import Json.Encode
import Orgauth.UserId exposing (..)


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]

        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type alias LoginData =
    { userid : UserId
    , uuid : String
    , name : String
    , email : String
    , admin : Bool
    , active : Bool
    , data : Maybe String
    }


loginDataEncoder : LoginData -> Json.Encode.Value
loginDataEncoder struct =
    Json.Encode.object
        [ ( "userid", userIdEncoder struct.userid )
        , ( "uuid", Json.Encode.string struct.uuid )
        , ( "name", Json.Encode.string struct.name )
        , ( "email", Json.Encode.string struct.email )
        , ( "admin", Json.Encode.bool struct.admin )
        , ( "active", Json.Encode.bool struct.active )
        , ( "data", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.data )
        ]


type alias AdminSettings =
    { openRegistration : Bool
    , sendEmails : Bool
    , nonAdminInvite : Bool
    , remoteRegistration : Bool
    }


adminSettingsEncoder : AdminSettings -> Json.Encode.Value
adminSettingsEncoder struct =
    Json.Encode.object
        [ ( "open_registration", Json.Encode.bool struct.openRegistration )
        , ( "send_emails", Json.Encode.bool struct.sendEmails )
        , ( "non_admin_invite", Json.Encode.bool struct.nonAdminInvite )
        , ( "remote_registration", Json.Encode.bool struct.remoteRegistration )
        ]


type alias User =
    { id : UserId
    , uuid : String
    , name : String
    , hashwd : String
    , salt : String
    , email : String
    , registrationKey : Maybe String
    , admin : Bool
    , active : Bool
    , remoteUrl : Maybe String
    , cookie : Maybe String
    }


userEncoder : User -> Json.Encode.Value
userEncoder struct =
    Json.Encode.object
        [ ( "id", userIdEncoder struct.id )
        , ( "uuid", Json.Encode.string struct.uuid )
        , ( "name", Json.Encode.string struct.name )
        , ( "hashwd", Json.Encode.string struct.hashwd )
        , ( "salt", Json.Encode.string struct.salt )
        , ( "email", Json.Encode.string struct.email )
        , ( "registration_key", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.registrationKey )
        , ( "admin", Json.Encode.bool struct.admin )
        , ( "active", Json.Encode.bool struct.active )
        , ( "remote_url", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.remoteUrl )
        , ( "cookie", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.cookie )
        ]


type alias PhantomUser =
    { id : UserId
    , uuid : String
    , name : String
    , active : Bool
    , extraLoginData : String
    }


phantomUserEncoder : PhantomUser -> Json.Encode.Value
phantomUserEncoder struct =
    Json.Encode.object
        [ ( "id", userIdEncoder struct.id )
        , ( "uuid", Json.Encode.string struct.uuid )
        , ( "name", Json.Encode.string struct.name )
        , ( "active", Json.Encode.bool struct.active )
        , ( "extra_login_data", Json.Encode.string struct.extraLoginData )
        ]


type alias UserInvite =
    { email : Maybe String
    , token : String
    , url : String
    , data : Maybe String
    , creator : UserId
    }


userInviteEncoder : UserInvite -> Json.Encode.Value
userInviteEncoder struct =
    Json.Encode.object
        [ ( "email", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.email )
        , ( "token", Json.Encode.string struct.token )
        , ( "url", Json.Encode.string struct.url )
        , ( "data", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.data )
        , ( "creator", userIdEncoder struct.creator )
        ]


type alias GetInvite =
    { email : Maybe String
    , data : Maybe String
    }


getInviteEncoder : GetInvite -> Json.Encode.Value
getInviteEncoder struct =
    Json.Encode.object
        [ ( "email", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.email )
        , ( "data", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) struct.data )
        ]


type alias RegistrationData =
    { uid : String
    , pwd : String
    , email : String
    , remoteUrl : String
    }


registrationDataEncoder : RegistrationData -> Json.Encode.Value
registrationDataEncoder struct =
    Json.Encode.object
        [ ( "uid", Json.Encode.string struct.uid )
        , ( "pwd", Json.Encode.string struct.pwd )
        , ( "email", Json.Encode.string struct.email )
        , ( "remote_url", Json.Encode.string struct.remoteUrl )
        ]


type alias Rsvp =
    { uid : String
    , pwd : String
    , email : String
    , invite : String
    }


rsvpEncoder : Rsvp -> Json.Encode.Value
rsvpEncoder struct =
    Json.Encode.object
        [ ( "uid", Json.Encode.string struct.uid )
        , ( "pwd", Json.Encode.string struct.pwd )
        , ( "email", Json.Encode.string struct.email )
        , ( "invite", Json.Encode.string struct.invite )
        ]


type alias Login =
    { uid : String
    , pwd : String
    }


loginEncoder : Login -> Json.Encode.Value
loginEncoder struct =
    Json.Encode.object
        [ ( "uid", Json.Encode.string struct.uid )
        , ( "pwd", Json.Encode.string struct.pwd )
        ]


type alias ResetPassword =
    { uid : String
    }


resetPasswordEncoder : ResetPassword -> Json.Encode.Value
resetPasswordEncoder struct =
    Json.Encode.object
        [ ( "uid", Json.Encode.string struct.uid )
        ]


type alias PwdReset =
    { userid : UserId
    , url : String
    }


pwdResetEncoder : PwdReset -> Json.Encode.Value
pwdResetEncoder struct =
    Json.Encode.object
        [ ( "userid", userIdEncoder struct.userid )
        , ( "url", Json.Encode.string struct.url )
        ]


type alias SetPassword =
    { uid : String
    , newpwd : String
    , resetKey : String
    }


setPasswordEncoder : SetPassword -> Json.Encode.Value
setPasswordEncoder struct =
    Json.Encode.object
        [ ( "uid", Json.Encode.string struct.uid )
        , ( "newpwd", Json.Encode.string struct.newpwd )
        , ( "reset_key", Json.Encode.string struct.resetKey )
        ]


type alias ChangePassword =
    { oldpwd : String
    , newpwd : String
    }


changePasswordEncoder : ChangePassword -> Json.Encode.Value
changePasswordEncoder struct =
    Json.Encode.object
        [ ( "oldpwd", Json.Encode.string struct.oldpwd )
        , ( "newpwd", Json.Encode.string struct.newpwd )
        ]


type alias ChangeEmail =
    { pwd : String
    , email : String
    }


changeEmailEncoder : ChangeEmail -> Json.Encode.Value
changeEmailEncoder struct =
    Json.Encode.object
        [ ( "pwd", Json.Encode.string struct.pwd )
        , ( "email", Json.Encode.string struct.email )
        ]


type UserRequest
    = UrqRegister RegistrationData
    | UrqLogin Login
    | UrqReadInvite String
    | UrqRsvp Rsvp
    | UrqResetPassword ResetPassword
    | UrqSetPassword SetPassword
    | UrqLogout
    | UrqAuthedRequest AuthedRequest


userRequestEncoder : UserRequest -> Json.Encode.Value
userRequestEncoder enum =
    case enum of
        UrqRegister inner ->
            Json.Encode.object [ ( "UrqRegister", registrationDataEncoder inner ) ]

        UrqLogin inner ->
            Json.Encode.object [ ( "UrqLogin", loginEncoder inner ) ]

        UrqReadInvite inner ->
            Json.Encode.object [ ( "UrqReadInvite", Json.Encode.string inner ) ]

        UrqRsvp inner ->
            Json.Encode.object [ ( "UrqRSVP", rsvpEncoder inner ) ]

        UrqResetPassword inner ->
            Json.Encode.object [ ( "UrqResetPassword", resetPasswordEncoder inner ) ]

        UrqSetPassword inner ->
            Json.Encode.object [ ( "UrqSetPassword", setPasswordEncoder inner ) ]

        UrqLogout ->
            Json.Encode.string "UrqLogout"

        UrqAuthedRequest inner ->
            Json.Encode.object [ ( "UrqAuthedRequest", authedRequestEncoder inner ) ]


type AuthedRequest
    = AthGetInvite GetInvite
    | AthChangePassword ChangePassword
    | AthChangeEmail ChangeEmail
    | AthReadRemoteUser UserId


authedRequestEncoder : AuthedRequest -> Json.Encode.Value
authedRequestEncoder enum =
    case enum of
        AthGetInvite inner ->
            Json.Encode.object [ ( "AthGetInvite", getInviteEncoder inner ) ]

        AthChangePassword inner ->
            Json.Encode.object [ ( "AthChangePassword", changePasswordEncoder inner ) ]

        AthChangeEmail inner ->
            Json.Encode.object [ ( "AthChangeEmail", changeEmailEncoder inner ) ]

        AthReadRemoteUser inner ->
            Json.Encode.object [ ( "AthReadRemoteUser", userIdEncoder inner ) ]


type UserResponse
    = UrpRegistrationSent
    | UrpUserExists
    | UrpUnregisteredUser
    | UrpInvalidUserOrPwd
    | UrpInvalidUserId
    | UrpBlankUserName
    | UrpBlankPassword
    | UrpNotLoggedIn
    | UrpAccountDeactivated
    | UrpLoggedIn LoginData
    | UrpLoggedOut
    | UrpChangedPassword
    | UrpChangedEmail
    | UrpResetPasswordAck
    | UrpSetPasswordAck
    | UrpInvite UserInvite
    | UrpRemoteRegistrationFailed
    | UrpRemoteUser PhantomUser
    | UrpNoData
    | UrpServerError String


userResponseEncoder : UserResponse -> Json.Encode.Value
userResponseEncoder enum =
    case enum of
        UrpRegistrationSent ->
            Json.Encode.string "UrpRegistrationSent"

        UrpUserExists ->
            Json.Encode.string "UrpUserExists"

        UrpUnregisteredUser ->
            Json.Encode.string "UrpUnregisteredUser"

        UrpInvalidUserOrPwd ->
            Json.Encode.string "UrpInvalidUserOrPwd"

        UrpInvalidUserId ->
            Json.Encode.string "UrpInvalidUserId"

        UrpBlankUserName ->
            Json.Encode.string "UrpBlankUserName"

        UrpBlankPassword ->
            Json.Encode.string "UrpBlankPassword"

        UrpNotLoggedIn ->
            Json.Encode.string "UrpNotLoggedIn"

        UrpAccountDeactivated ->
            Json.Encode.string "UrpAccountDeactivated"

        UrpLoggedIn inner ->
            Json.Encode.object [ ( "UrpLoggedIn", loginDataEncoder inner ) ]

        UrpLoggedOut ->
            Json.Encode.string "UrpLoggedOut"

        UrpChangedPassword ->
            Json.Encode.string "UrpChangedPassword"

        UrpChangedEmail ->
            Json.Encode.string "UrpChangedEmail"

        UrpResetPasswordAck ->
            Json.Encode.string "UrpResetPasswordAck"

        UrpSetPasswordAck ->
            Json.Encode.string "UrpSetPasswordAck"

        UrpInvite inner ->
            Json.Encode.object [ ( "UrpInvite", userInviteEncoder inner ) ]

        UrpRemoteRegistrationFailed ->
            Json.Encode.string "UrpRemoteRegistrationFailed"

        UrpRemoteUser inner ->
            Json.Encode.object [ ( "UrpRemoteUser", phantomUserEncoder inner ) ]

        UrpNoData ->
            Json.Encode.string "UrpNoData"

        UrpServerError inner ->
            Json.Encode.object [ ( "UrpServerError", Json.Encode.string inner ) ]


type AdminRequest
    = ArqGetUsers
    | ArqDeleteUser UserId
    | ArqUpdateUser LoginData
    | ArqGetInvite GetInvite
    | ArqGetPwdReset UserId


adminRequestEncoder : AdminRequest -> Json.Encode.Value
adminRequestEncoder enum =
    case enum of
        ArqGetUsers ->
            Json.Encode.string "ArqGetUsers"

        ArqDeleteUser inner ->
            Json.Encode.object [ ( "ArqDeleteUser", userIdEncoder inner ) ]

        ArqUpdateUser inner ->
            Json.Encode.object [ ( "ArqUpdateUser", loginDataEncoder inner ) ]

        ArqGetInvite inner ->
            Json.Encode.object [ ( "ArqGetInvite", getInviteEncoder inner ) ]

        ArqGetPwdReset inner ->
            Json.Encode.object [ ( "ArqGetPwdReset", userIdEncoder inner ) ]


type AdminResponse
    = ArpUsers (List LoginData)
    | ArpUserDeleted UserId
    | ArpUserNotDeleted UserId
    | ArpNoUserId
    | ArpNoData
    | ArpUserUpdated LoginData
    | ArpServerError
    | ArpUserInvite UserInvite
    | ArpPwdReset PwdReset
    | ArpNotLoggedIn
    | ArpInvalidUserOrPassword
    | ArpAccessDenied


adminResponseEncoder : AdminResponse -> Json.Encode.Value
adminResponseEncoder enum =
    case enum of
        ArpUsers inner ->
            Json.Encode.object [ ( "ArpUsers", Json.Encode.list loginDataEncoder inner ) ]

        ArpUserDeleted inner ->
            Json.Encode.object [ ( "ArpUserDeleted", userIdEncoder inner ) ]

        ArpUserNotDeleted inner ->
            Json.Encode.object [ ( "ArpUserNotDeleted", userIdEncoder inner ) ]

        ArpNoUserId ->
            Json.Encode.string "ArpNoUserId"

        ArpNoData ->
            Json.Encode.string "ArpNoData"

        ArpUserUpdated inner ->
            Json.Encode.object [ ( "ArpUserUpdated", loginDataEncoder inner ) ]

        ArpServerError ->
            Json.Encode.string "ArpServerError"

        ArpUserInvite inner ->
            Json.Encode.object [ ( "ArpUserInvite", userInviteEncoder inner ) ]

        ArpPwdReset inner ->
            Json.Encode.object [ ( "ArpPwdReset", pwdResetEncoder inner ) ]

        ArpNotLoggedIn ->
            Json.Encode.string "ArpNotLoggedIn"

        ArpInvalidUserOrPassword ->
            Json.Encode.string "ArpInvalidUserOrPassword"

        ArpAccessDenied ->
            Json.Encode.string "ArpAccessDenied"


loginDataDecoder : Json.Decode.Decoder LoginData
loginDataDecoder =
    Json.Decode.succeed LoginData
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "userid" userIdDecoder))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uuid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "name" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "admin" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "active" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "data" (Json.Decode.nullable Json.Decode.string)))


adminSettingsDecoder : Json.Decode.Decoder AdminSettings
adminSettingsDecoder =
    Json.Decode.succeed AdminSettings
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "open_registration" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "send_emails" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "non_admin_invite" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "remote_registration" Json.Decode.bool))


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "id" userIdDecoder))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uuid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "name" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "hashwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "salt" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "registration_key" (Json.Decode.nullable Json.Decode.string)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "admin" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "active" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "remote_url" (Json.Decode.nullable Json.Decode.string)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "cookie" (Json.Decode.nullable Json.Decode.string)))


phantomUserDecoder : Json.Decode.Decoder PhantomUser
phantomUserDecoder =
    Json.Decode.succeed PhantomUser
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "id" userIdDecoder))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uuid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "name" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "active" Json.Decode.bool))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "extra_login_data" Json.Decode.string))


userInviteDecoder : Json.Decode.Decoder UserInvite
userInviteDecoder =
    Json.Decode.succeed UserInvite
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" (Json.Decode.nullable Json.Decode.string)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "token" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "url" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "data" (Json.Decode.nullable Json.Decode.string)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "creator" userIdDecoder))


getInviteDecoder : Json.Decode.Decoder GetInvite
getInviteDecoder =
    Json.Decode.succeed GetInvite
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" (Json.Decode.nullable Json.Decode.string)))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "data" (Json.Decode.nullable Json.Decode.string)))


registrationDataDecoder : Json.Decode.Decoder RegistrationData
registrationDataDecoder =
    Json.Decode.succeed RegistrationData
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "remote_url" Json.Decode.string))


rsvpDecoder : Json.Decode.Decoder Rsvp
rsvpDecoder =
    Json.Decode.succeed Rsvp
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "invite" Json.Decode.string))


loginDecoder : Json.Decode.Decoder Login
loginDecoder =
    Json.Decode.succeed Login
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pwd" Json.Decode.string))


resetPasswordDecoder : Json.Decode.Decoder ResetPassword
resetPasswordDecoder =
    Json.Decode.succeed ResetPassword
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uid" Json.Decode.string))


pwdResetDecoder : Json.Decode.Decoder PwdReset
pwdResetDecoder =
    Json.Decode.succeed PwdReset
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "userid" userIdDecoder))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "url" Json.Decode.string))


setPasswordDecoder : Json.Decode.Decoder SetPassword
setPasswordDecoder =
    Json.Decode.succeed SetPassword
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "uid" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "newpwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "reset_key" Json.Decode.string))


changePasswordDecoder : Json.Decode.Decoder ChangePassword
changePasswordDecoder =
    Json.Decode.succeed ChangePassword
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "oldpwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "newpwd" Json.Decode.string))


changeEmailDecoder : Json.Decode.Decoder ChangeEmail
changeEmailDecoder =
    Json.Decode.succeed ChangeEmail
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "pwd" Json.Decode.string))
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "email" Json.Decode.string))


userRequestDecoder : Json.Decode.Decoder UserRequest
userRequestDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map UrqRegister (Json.Decode.field "UrqRegister" registrationDataDecoder)
        , Json.Decode.map UrqLogin (Json.Decode.field "UrqLogin" loginDecoder)
        , Json.Decode.map UrqReadInvite (Json.Decode.field "UrqReadInvite" Json.Decode.string)
        , Json.Decode.map UrqRsvp (Json.Decode.field "UrqRSVP" rsvpDecoder)
        , Json.Decode.map UrqResetPassword (Json.Decode.field "UrqResetPassword" resetPasswordDecoder)
        , Json.Decode.map UrqSetPassword (Json.Decode.field "UrqSetPassword" setPasswordDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrqLogout" ->
                            Json.Decode.succeed UrqLogout

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map UrqAuthedRequest (Json.Decode.field "UrqAuthedRequest" authedRequestDecoder)
        ]


authedRequestDecoder : Json.Decode.Decoder AuthedRequest
authedRequestDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map AthGetInvite (Json.Decode.field "AthGetInvite" getInviteDecoder)
        , Json.Decode.map AthChangePassword (Json.Decode.field "AthChangePassword" changePasswordDecoder)
        , Json.Decode.map AthChangeEmail (Json.Decode.field "AthChangeEmail" changeEmailDecoder)
        , Json.Decode.map AthReadRemoteUser (Json.Decode.field "AthReadRemoteUser" userIdDecoder)
        ]


userResponseDecoder : Json.Decode.Decoder UserResponse
userResponseDecoder =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpRegistrationSent" ->
                            Json.Decode.succeed UrpRegistrationSent

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpUserExists" ->
                            Json.Decode.succeed UrpUserExists

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpUnregisteredUser" ->
                            Json.Decode.succeed UrpUnregisteredUser

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpInvalidUserOrPwd" ->
                            Json.Decode.succeed UrpInvalidUserOrPwd

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpInvalidUserId" ->
                            Json.Decode.succeed UrpInvalidUserId

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpBlankUserName" ->
                            Json.Decode.succeed UrpBlankUserName

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpBlankPassword" ->
                            Json.Decode.succeed UrpBlankPassword

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpNotLoggedIn" ->
                            Json.Decode.succeed UrpNotLoggedIn

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpAccountDeactivated" ->
                            Json.Decode.succeed UrpAccountDeactivated

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map UrpLoggedIn (Json.Decode.field "UrpLoggedIn" loginDataDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpLoggedOut" ->
                            Json.Decode.succeed UrpLoggedOut

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpChangedPassword" ->
                            Json.Decode.succeed UrpChangedPassword

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpChangedEmail" ->
                            Json.Decode.succeed UrpChangedEmail

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpResetPasswordAck" ->
                            Json.Decode.succeed UrpResetPasswordAck

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpSetPasswordAck" ->
                            Json.Decode.succeed UrpSetPasswordAck

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map UrpInvite (Json.Decode.field "UrpInvite" userInviteDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpRemoteRegistrationFailed" ->
                            Json.Decode.succeed UrpRemoteRegistrationFailed

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map UrpRemoteUser (Json.Decode.field "UrpRemoteUser" phantomUserDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "UrpNoData" ->
                            Json.Decode.succeed UrpNoData

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map UrpServerError (Json.Decode.field "UrpServerError" Json.Decode.string)
        ]


adminRequestDecoder : Json.Decode.Decoder AdminRequest
adminRequestDecoder =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArqGetUsers" ->
                            Json.Decode.succeed ArqGetUsers

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map ArqDeleteUser (Json.Decode.field "ArqDeleteUser" userIdDecoder)
        , Json.Decode.map ArqUpdateUser (Json.Decode.field "ArqUpdateUser" loginDataDecoder)
        , Json.Decode.map ArqGetInvite (Json.Decode.field "ArqGetInvite" getInviteDecoder)
        , Json.Decode.map ArqGetPwdReset (Json.Decode.field "ArqGetPwdReset" userIdDecoder)
        ]


adminResponseDecoder : Json.Decode.Decoder AdminResponse
adminResponseDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ArpUsers (Json.Decode.field "ArpUsers" (Json.Decode.list loginDataDecoder))
        , Json.Decode.map ArpUserDeleted (Json.Decode.field "ArpUserDeleted" userIdDecoder)
        , Json.Decode.map ArpUserNotDeleted (Json.Decode.field "ArpUserNotDeleted" userIdDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpNoUserId" ->
                            Json.Decode.succeed ArpNoUserId

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpNoData" ->
                            Json.Decode.succeed ArpNoData

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map ArpUserUpdated (Json.Decode.field "ArpUserUpdated" loginDataDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpServerError" ->
                            Json.Decode.succeed ArpServerError

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.map ArpUserInvite (Json.Decode.field "ArpUserInvite" userInviteDecoder)
        , Json.Decode.map ArpPwdReset (Json.Decode.field "ArpPwdReset" pwdResetDecoder)
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpNotLoggedIn" ->
                            Json.Decode.succeed ArpNotLoggedIn

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpInvalidUserOrPassword" ->
                            Json.Decode.succeed ArpInvalidUserOrPassword

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "ArpAccessDenied" ->
                            Json.Decode.succeed ArpAccessDenied

                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]
